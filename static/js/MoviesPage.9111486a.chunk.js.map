{"version":3,"file":"static/js/MoviesPage.9111486a.chunk.js","mappings":"yOACA,EAA4B,8BAA5B,EAAuE,+BAAvE,EAAyH,qCAAzH,EAAsS,oC,oECqGtS,EA/FmB,WACjB,OAAsCA,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,OAEhBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,IAAIC,gBAAgBN,EAASO,QAAQC,IAAI,SAE9D,GAAIH,EAAc,CAChB,IAAMI,EAAS,mCAAG,uGACUC,EAAAA,EAAAA,IAAaL,GADvB,gBACRM,EADQ,EACRA,QAERZ,EAAUY,GACVd,EAAeQ,GAEfO,QAAQC,IAAIR,GANI,2CAAH,qDASfI,OAED,CAACT,EAASO,SAEb,IAAMO,EAAY,mCAAG,WAAMC,GAAN,4EACnBA,EAAEC,kBAEEpB,EAAYqB,OAHG,kCAISP,EAAAA,EAAAA,IAAad,GAJtB,gBAITe,EAJS,EAITA,QAERZ,EAAUY,GACVd,EAAe,IAEQ,IAAnBc,EAAQO,QACVC,IAAAA,OAAAA,QACE,6DAIJjB,EAAQkB,MAAR,kBACKpB,GADL,IAEEO,OAAO,SAAD,OAAWX,MAjBF,4CAAH,sDAsBlB,OACE,iCACE,mBAAQyB,UAAWC,EAAnB,UACE,kBAAMD,UAAWC,EAAcC,SAAUT,EAAzC,WACE,kBACEU,SAAU,SAAAT,GAAC,OAAIlB,EAAekB,EAAEU,OAAOC,QACvCL,UAAWC,EACXK,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZJ,MAAO9B,KAET,mBAAQ+B,KAAK,SAASN,UAAWC,EAAjC,yBAKHxB,EAAOoB,OAAS,GACfpB,EAAOiC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,EAAcC,YAAd,OACT,yBACE,yBACE,SAAC,KAAD,CACEC,GAAI,CACFC,SAAS,WAAD,iBAAgBJ,IACxBK,MAAO,CACLC,KAAM,CACJtC,SAAAA,KALR,UAkBE,uBAAIiC,OAnBCD,a,kOCxErBO,IAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAM,mCACCC,EAAY,kCAEZ/B,EAAY,mCAAG,WAAMgC,GAAN,kFACpBC,EADoB,+BACkBH,EADlB,4DACyEE,GADzE,SAEKH,IAAAA,IAAUI,GAFf,uBAEZ7C,EAFY,EAElB8C,KAFkB,kBAGnB9C,GAHmB,2CAAH,sDAMZ+C,EAAe,mCAAG,WAAMC,GAAN,kFACvBH,EADuB,gBACAG,EADA,qBACoBN,EADpB,4BAECD,IAAAA,IAAUI,GAFX,uBAEfI,EAFe,EAErBH,KAFqB,kBAGtBG,GAHsB,2CAAH,sDAMfC,EAAmB,mCAAG,+FAC3BL,EAD2B,qCACiBH,GADjB,SAEFD,IAAAA,IAAUI,GAFR,uBAEnB7C,EAFmB,EAEzB8C,KAFyB,kBAG1B9C,GAH0B,2CAAH,qDAMnBmD,EAAY,mCAAG,WAAMH,GAAN,kFACpBH,EADoB,gBACGG,EADH,sDAEHP,IAAAA,IAAUI,GAFP,uBAElBC,EAFkB,EAElBA,KAFkB,kBAGnBA,GAHmB,2CAAH,sDAMZM,EAAU,mCAAG,WAAMJ,GAAN,kFAClBH,EADkB,gBACKG,EADL,sDAEDP,IAAAA,IAAUI,GAFT,uBAEhBC,EAFgB,EAEhBA,KAFgB,kBAGjBA,GAHiB,2CAAH","sources":["webpack://react-homework-template/./src/pages/MoviesPage.module.css?f2bc","pages/MoviesPage.js","services/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"MoviesPage_searchbar__h5+Hv\",\"searchForm\":\"MoviesPage_searchForm__MtlmP\",\"searchFormButton\":\"MoviesPage_searchFormButton__wppho\",\"SearchForm-button\":\"MoviesPage_SearchForm-button__r8iCn\",\"SearchFormBtnLabel\":\"MoviesPage_SearchFormBtnLabel__Iy7OQ\",\"SearchFormInput\":\"MoviesPage_SearchFormInput__weghc\"};","import s from './MoviesPage.module.css';\n\nimport { useState, useEffect } from 'react';\nimport { searchMovies } from '../services/movies-api';\nimport { Link, useLocation, useHistory } from 'react-router-dom';\nimport Notiflix from 'notiflix';\n\nconst MoviesPage = () => {\n  const [movieToFind, setMovieToFind] = useState('');\n  const [movies, setMovies] = useState([]);\n\n  const location = useLocation();\n  const history = useHistory();\n\n  useEffect(() => {\n    const searchString = new URLSearchParams(location.search).get('query');\n\n    if (searchString) {\n      const getMovies = async () => {\n        const { results } = await searchMovies(searchString);\n\n        setMovies(results);\n        setMovieToFind(searchString);\n\n        console.log(searchString);\n      };\n\n      getMovies();\n    }\n  }, [location.search]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (movieToFind.trim()) {\n      const { results } = await searchMovies(movieToFind);\n\n      setMovies(results);\n      setMovieToFind('');\n\n      if (results.length === 0) {\n        Notiflix.Notify.warning(\n          'No movies found! Please change your request and try again'\n        );\n      }\n\n      history.push({\n        ...location,\n        search: `query=${movieToFind}`,\n      });\n    }\n  };\n\n  return (\n    <>\n      <header className={s.searchbar}>\n        <form className={s.searchForm} onSubmit={handleSubmit}>\n          <input\n            onChange={e => setMovieToFind(e.target.value)}\n            className={s.SearchFormInput}\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movie\"\n            value={movieToFind}\n          />\n          <button type=\"submit\" className={s.searchFormButton}>\n            search\n          </button>\n        </form>\n      </header>\n      {movies.length > 0 &&\n        movies.map(({ id, title, poster_path }) => (\n          <ul>\n            <li key={id}>\n              <Link\n                to={{\n                  pathname: `/movies/${`${id}`}`,\n                  state: {\n                    from: {\n                      location,\n                    },\n                  },\n                }}\n              >\n                {/* <img\n                  src={\n                    poster_path\n                      ? `https://image.tmdb.org/t/p/w300${poster_path}`\n                      : 'https://pomogaetsrazu.ru/images/offers/2829219234.jpg'\n                  }\n                  alt={title}\n                /> */}\n                <p>{title}</p>\n              </Link>\n            </li>\n          </ul>\n        ))}\n    </>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst KEY = '1c946dce2b60cb636de6f72a25cb04da';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const searchMovies = async stringToSearch => {\n  const queryString = `search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${stringToSearch}`;\n  const { data: movies } = await axios.get(queryString);\n  return movies;\n};\n\nexport const getMovieDetails = async movieId => {\n  const queryString = `movie/${movieId}$?api_key=${KEY}&language=en-US`;\n  const { data: movie } = await axios.get(queryString);\n  return movie;\n};\n\nexport const fetchTrendingMovies = async () => {\n  const queryString = `trending/movie/day?api_key=${KEY}`;\n  const { data: movies } = await axios.get(queryString);\n  return movies;\n};\n\nexport const getMovieCast = async movieId => {\n  const queryString = `movie/${movieId}/credits$?api_key={apiKey}&language=en-US`;\n  const { data } = await axios.get(queryString);\n  return data;\n};\n\nexport const getReviews = async movieId => {\n  const queryString = `movie/${movieId}/reviews$?api_key={apiKey}&language=en-US`;\n  const { data } = await axios.get(queryString);\n  return data;\n};\n"],"names":["useState","movieToFind","setMovieToFind","movies","setMovies","location","useLocation","history","useHistory","useEffect","searchString","URLSearchParams","search","get","getMovies","searchMovies","results","console","log","handleSubmit","e","preventDefault","trim","length","Notiflix","push","className","s","onSubmit","onChange","target","value","type","autoComplete","autoFocus","placeholder","map","id","title","poster_path","to","pathname","state","from","axios","KEY","IMAGE_URL","stringToSearch","queryString","data","getMovieDetails","movieId","movie","fetchTrendingMovies","getMovieCast","getReviews"],"sourceRoot":""}