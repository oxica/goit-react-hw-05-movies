{"version":3,"file":"static/js/MoviesPage.4b4954e7.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Searchbar/Searchbar.module.css?8d9e","pages/MoviesPage.js","services/slug.js","services/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"Searchbar_searchbar__0FWoU\",\"searchForm\":\"Searchbar_searchForm__Bt5yh\",\"searchFormButton\":\"Searchbar_searchFormButton__Y7AQk\",\"SearchForm-button\":\"Searchbar_SearchForm-button__MrOv5\",\"SearchFormBtnLabel\":\"Searchbar_SearchFormBtnLabel__Xjpy0\",\"SearchFormInput\":\"Searchbar_SearchFormInput__FT6Bx\"};","import s from '../components/Searchbar/Searchbar.module.css';\n\nimport { useState, useEffect } from 'react';\nimport { searchMovies } from '../services/movies-api';\nimport { Link, useLocation, useHistory } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport { makeSlug } from '../services/slug';\n\nconst MoviesPage = () => {\n  const [movieToFind, setMovieToFind] = useState('');\n  const [movies, setMovies] = useState([]);\n\n  const location = useLocation();\n  const history = useHistory();\n\n  useEffect(() => {\n    const searchString = new URLSearchParams(location.search).get('query');\n\n    if (searchString) {\n      const getMovies = async () => {\n        const { results } = await searchMovies(searchString);\n\n        setMovies(results);\n        setMovieToFind('');\n      };\n\n      getMovies();\n    }\n  }, [location.search]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (movieToFind.trim()) {\n      const { results } = await searchMovies(movieToFind);\n\n      setMovies(results);\n      setMovieToFind('');\n\n      if (results.length === 0) {\n        Notiflix.Notify.warning(\n          'No movies found! Please change your request and try again'\n        );\n      }\n\n      history.push({\n        ...location,\n        search: `query=${movieToFind}`,\n      });\n    }\n  };\n\n  return (\n    <>\n      <header className={s.searchbar}>\n        <form className={s.searchForm} onSubmit={handleSubmit}>\n          <input\n            onChange={e => setMovieToFind(e.target.value)}\n            className={s.SearchFormInput}\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movie\"\n            value={movieToFind}\n          />\n          <button type=\"submit\" className={s.searchFormButton}>\n            search\n          </button>\n        </form>\n      </header>\n      {movies.length > 0 &&\n        movies.map(({ id, title, poster_path }) => (\n          <ul>\n            <li key={id}>\n              <Link\n                to={{\n                  pathname: `/movies/${makeSlug(`${title} ${id}`)}`,\n                  state: {\n                    from: {\n                      location,\n                      label: 'Back to Movies',\n                    },\n                  },\n                }}\n              >\n                {/* <img\n                  src={\n                    poster_path\n                      ? `https://image.tmdb.org/t/p/w300${poster_path}`\n                      : 'https://pomogaetsrazu.ru/images/offers/2829219234.jpg'\n                  }\n                  alt={title}\n                /> */}\n                <p className={s.moviesList__movieTitle}>{title}</p>\n              </Link>\n            </li>\n          </ul>\n        ))}\n    </>\n  );\n};\n\nexport default MoviesPage;\n","import slugify from 'slugify';\n\nexport const makeSlug = string =>\n  slugify(string, {\n    lower: true,\n  });\n\nexport const getIdFromSlug = slug => slug.match(/[a-z0-9]+$/)[0];\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst KEY = '1c946dce2b60cb636de6f72a25cb04da';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrendMovies() {\n  return fetchWithErrorHandling(`${BASE_URL}/trending/all/day?api_key=${KEY}`);\n}\n\nexport function fetchMovieById(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}?api_key=${KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieCast(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieReviews(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieSearch(name) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${name}&language=en-US&page=1&include_adult=false`\n  );\n}\n\nexport const searchMovies = async stringToSearch => {\n  const queryString = `search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${stringToSearch}`;\n\n  const { data: movies } = await axios.get(queryString);\n\n  return movies;\n};\n"],"names":["useState","movieToFind","setMovieToFind","movies","setMovies","location","useLocation","history","useHistory","useEffect","searchString","URLSearchParams","search","get","getMovies","searchMovies","results","handleSubmit","e","preventDefault","trim","length","Notiflix","push","className","s","onSubmit","onChange","target","value","type","autoComplete","autoFocus","placeholder","map","string","id","title","poster_path","to","pathname","slugify","lower","state","from","label","axios","KEY","BASE_URL","IMAGE_URL","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendMovies","fetchMovieById","fetchMovieCast","fetchMovieReviews","stringToSearch","queryString","data"],"sourceRoot":""}